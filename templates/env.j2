# Security
#
# Set these to strong passwords to avoid intruders from impersonating a service account
# The service(s) won't start unless these are specified
# Running ./gen-passwords.sh will update .env with strong passwords
# You may skip the Jigasi and Jibri passwords if you are not using those
# DO NOT reuse passwords
#

# XMPP component password for Jicofo
JICOFO_COMPONENT_SECRET={{ jitsi_jicofo_component_secret | mandatory }}

# XMPP password for Jicofo client connections
JICOFO_AUTH_PASSWORD={{ jitsi_jicofo_auth_password | mandatory }}

# XMPP password for JVB client connections
JVB_AUTH_PASSWORD={{ jitsi_jvb_auth_password | mandatory }}

# XMPP recorder password for Jibri client connections
JIBRI_RECORDER_PASSWORD={{ jitsi_jibri_recorder_password | mandatory }}

# XMPP password for Jibri client connections
JIBRI_XMPP_PASSWORD={{ jitsi_jibri_xmpp_password | mandatory }}


#
# Basic configuration options
#

# Directory where all configuration will be stored
CONFIG={{ jitsi_cont_vol }}

# Exposed HTTP port
HTTP_PORT={{ jitsi_web_http_port }}

# Disable HTTPS: handle TLS connections outside of this setup
#DISABLE_HTTPS=1

# Redirect HTTP traffic to HTTPS
ENABLE_HTTP_REDIRECT=1

# Needs to be set even when disabled
HTTPS_PORT={{ jitsi_web_https_port }}

# System time zone
TZ={{ jitsi_timezone }}

# Public URL for the web service
PUBLIC_URL=https://{{ jitsi_domain | mandatory }}


#
# Let's Encrypt configuration
#

# Enable Let's Encrypt certificate generation
ENABLE_LETSENCRYPT=1

# Domain for which to generate the certificate
LETSENCRYPT_DOMAIN={{ jitsi_domain | mandatory }}

# E-Mail for receiving important account notifications (mandatory)
LETSENCRYPT_EMAIL={{ jitsi_admin_email | mandatory }}


#
# Authentication configuration (see README for details)
#

# Enable authentication
#ENABLE_AUTH=1

# Enable guest access
#ENABLE_GUESTS=1

# Select authentication type: internal, jwt or ldap
#AUTH_TYPE=internal

#
# Advanced configuration options (you generally don't need to change these)
#

# Internal XMPP domain
XMPP_DOMAIN={{ jitsi_domain | mandatory }}

# Internal XMPP server
XMPP_SERVER=xmpp.{{ jitsi_domain | mandatory }}

# Internal XMPP server URL
XMPP_BOSH_URL_BASE=http://xmpp.{{ jitsi_domain | mandatory }}:5280

# Internal XMPP domain for authenticated services
XMPP_AUTH_DOMAIN=auth.{{ jitsi_domain | mandatory }}

# XMPP domain for the MUC
XMPP_MUC_DOMAIN=muc.{{ jitsi_domain | mandatory }}

# XMPP domain for the internal MUC used for jibri, jigasi and jvb pools
XMPP_INTERNAL_MUC_DOMAIN=internal-muc.{{ jitsi_domain | mandatory }}

# XMPP domain for unauthenticated users
XMPP_GUEST_DOMAIN=guest.{{ jitsi_domain | mandatory }}

# Custom Prosody modules for XMPP_DOMAIN (comma separated)
XMPP_MODULES=

# Custom Prosody modules for MUC component (comma separated)
XMPP_MUC_MODULES=

# Custom Prosody modules for internal MUC component (comma separated)
XMPP_INTERNAL_MUC_MODULES=

# MUC for the JVB pool
JVB_BREWERY_MUC=jvbbrewery

# XMPP user for JVB client connections
JVB_AUTH_USER=jvb

# STUN servers used to discover the server's public IP
JVB_STUN_SERVERS=meet-jit-si-turnrelay.jitsi.net:443

# Media port for the Jitsi Videobridge
JVB_PORT={{ jitsi_jvb_udp_port }}

# TCP Fallback for Jitsi Videobridge for when UDP isn't available
JVB_TCP_HARVESTER_DISABLED=false
JVB_TCP_PORT={{ jitsi_jvb_tcp_port }}

# A comma separated list of APIs to enable when the JVB is started [default: none]
# See https://github.com/jitsi/jitsi-videobridge/blob/master/doc/rest.md for more information
#JVB_ENABLE_APIS=rest,colibri

# XMPP user for Jicofo client connections.
# NOTE: this option doesn't currently work due to a bug
JICOFO_AUTH_USER=focus

# Base URL of Jicofo's reservation REST API
#JICOFO_RESERVATION_REST_BASE_URL=http://reservation.example.com


# Enable recording
ENABLE_RECORDING=1

# XMPP domain for the jibri recorder
XMPP_RECORDER_DOMAIN=recorder.{{ jitsi_domain | mandatory }}

# XMPP recorder user for Jibri client connections
JIBRI_RECORDER_USER=recorder

# Directory for recordings inside Jibri container
JIBRI_RECORDING_DIR=/config/recordings

# The finalizing script. Will run after recording is complete
JIBRI_FINALIZE_RECORDING_SCRIPT_PATH=/config/finalize.sh

# XMPP user for Jibri client connections
JIBRI_XMPP_USER=jibri

# MUC name for the Jibri pool
JIBRI_BREWERY_MUC=jibribrewery

# MUC connection timeout
JIBRI_PENDING_TIMEOUT=90

# When jibri gets a request to start a service for a room, the room
# jid will look like: roomName@optional.prefixes.subdomain.xmpp_domain
# We'll build the url for the call by transforming that into:
# https://xmpp_domain/subdomain/roomName
# So if there are any prefixes in the jid (like jitsi meet, which
# has its participants join a muc at conference.xmpp_domain) then
# list that prefix here so it can be stripped out to generate
# the call url correctly
JIBRI_STRIP_DOMAIN_JID=muc

# Directory for logs inside Jibri container
JIBRI_LOGS_DIR=/config/logs

# Container restart policy
# Defaults to unless-stopped
RESTART_POLICY={{ jitsi_cont_restart_policy }}

# Prosody Log Level
LOG_LEVEL={{ jitsi_prosody_log_level }}
